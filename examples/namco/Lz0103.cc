#include "Lz0103.h"
#include <squeeze.h>
#include <stdexcept>

namespace squeeze {

uint8_t rawData[3840] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00,
    0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00,
    0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x05, 0x00, 0x05, 0x00, 0x05, 0x00, 0x05, 0x00,
    0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x07, 0x00, 0x07, 0x00, 0x07, 0x00, 0x07, 0x00,
    0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00,
    0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0B, 0x00, 0x0B, 0x00, 0x0B, 0x00, 0x0B, 0x00,
    0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x0D, 0x00, 0x0D, 0x00, 0x0D, 0x00,
    0x0E, 0x00, 0x0E, 0x00, 0x0E, 0x00, 0x0E, 0x00, 0x0F, 0x00, 0x0F, 0x00, 0x0F, 0x00, 0x0F, 0x00,
    0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x11, 0x00, 0x11, 0x00, 0x11, 0x00, 0x11, 0x00,
    0x12, 0x00, 0x12, 0x00, 0x12, 0x00, 0x12, 0x00, 0x13, 0x00, 0x13, 0x00, 0x13, 0x00, 0x13, 0x00,
    0x14, 0x00, 0x14, 0x00, 0x14, 0x00, 0x14, 0x00, 0x15, 0x00, 0x15, 0x00, 0x15, 0x00, 0x15, 0x00,
    0x16, 0x00, 0x16, 0x00, 0x16, 0x00, 0x16, 0x00, 0x17, 0x00, 0x17, 0x00, 0x17, 0x00, 0x17, 0x00,
    0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x19, 0x00, 0x19, 0x00, 0x19, 0x00, 0x19, 0x00,
    0x1A, 0x00, 0x1A, 0x00, 0x1A, 0x00, 0x1A, 0x00, 0x1B, 0x00, 0x1B, 0x00, 0x1B, 0x00, 0x1B, 0x00,
    0x1C, 0x00, 0x1C, 0x00, 0x1C, 0x00, 0x1C, 0x00, 0x1D, 0x00, 0x1D, 0x00, 0x1D, 0x00, 0x1D, 0x00,
    0x1E, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00,
    0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x21, 0x00, 0x21, 0x00, 0x21, 0x00, 0x21, 0x00,
    0x22, 0x00, 0x22, 0x00, 0x22, 0x00, 0x22, 0x00, 0x23, 0x00, 0x23, 0x00, 0x23, 0x00, 0x23, 0x00,
    0x24, 0x00, 0x24, 0x00, 0x24, 0x00, 0x24, 0x00, 0x25, 0x00, 0x25, 0x00, 0x25, 0x00, 0x25, 0x00,
    0x26, 0x00, 0x26, 0x00, 0x26, 0x00, 0x26, 0x00, 0x27, 0x00, 0x27, 0x00, 0x27, 0x00, 0x27, 0x00,
    0x28, 0x00, 0x28, 0x00, 0x28, 0x00, 0x28, 0x00, 0x29, 0x00, 0x29, 0x00, 0x29, 0x00, 0x29, 0x00,
    0x2A, 0x00, 0x2A, 0x00, 0x2A, 0x00, 0x2A, 0x00, 0x2B, 0x00, 0x2B, 0x00, 0x2B, 0x00, 0x2B, 0x00,
    0x2C, 0x00, 0x2C, 0x00, 0x2C, 0x00, 0x2C, 0x00, 0x2D, 0x00, 0x2D, 0x00, 0x2D, 0x00, 0x2D, 0x00,
    0x2E, 0x00, 0x2E, 0x00, 0x2E, 0x00, 0x2E, 0x00, 0x2F, 0x00, 0x2F, 0x00, 0x2F, 0x00, 0x2F, 0x00,
    0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00,
    0x32, 0x00, 0x32, 0x00, 0x32, 0x00, 0x32, 0x00, 0x33, 0x00, 0x33, 0x00, 0x33, 0x00, 0x33, 0x00,
    0x34, 0x00, 0x34, 0x00, 0x34, 0x00, 0x34, 0x00, 0x35, 0x00, 0x35, 0x00, 0x35, 0x00, 0x35, 0x00,
    0x36, 0x00, 0x36, 0x00, 0x36, 0x00, 0x36, 0x00, 0x37, 0x00, 0x37, 0x00, 0x37, 0x00, 0x37, 0x00,
    0x38, 0x00, 0x38, 0x00, 0x38, 0x00, 0x38, 0x00, 0x39, 0x00, 0x39, 0x00, 0x39, 0x00, 0x39, 0x00,
    0x3A, 0x00, 0x3A, 0x00, 0x3A, 0x00, 0x3A, 0x00, 0x3B, 0x00, 0x3B, 0x00, 0x3B, 0x00, 0x3B, 0x00,
    0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3D, 0x00, 0x3D, 0x00, 0x3D, 0x00, 0x3D, 0x00,
    0x3E, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x00,
    0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x41, 0x00, 0x41, 0x00, 0x41, 0x00, 0x41, 0x00,
    0x42, 0x00, 0x42, 0x00, 0x42, 0x00, 0x42, 0x00, 0x43, 0x00, 0x43, 0x00, 0x43, 0x00, 0x43, 0x00,
    0x44, 0x00, 0x44, 0x00, 0x44, 0x00, 0x44, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00,
    0x46, 0x00, 0x46, 0x00, 0x46, 0x00, 0x46, 0x00, 0x47, 0x00, 0x47, 0x00, 0x47, 0x00, 0x47, 0x00,
    0x48, 0x00, 0x48, 0x00, 0x48, 0x00, 0x48, 0x00, 0x49, 0x00, 0x49, 0x00, 0x49, 0x00, 0x49, 0x00,
    0x4A, 0x00, 0x4A, 0x00, 0x4A, 0x00, 0x4A, 0x00, 0x4B, 0x00, 0x4B, 0x00, 0x4B, 0x00, 0x4B, 0x00,
    0x4C, 0x00, 0x4C, 0x00, 0x4C, 0x00, 0x4C, 0x00, 0x4D, 0x00, 0x4D, 0x00, 0x4D, 0x00, 0x4D, 0x00,
    0x4E, 0x00, 0x4E, 0x00, 0x4E, 0x00, 0x4E, 0x00, 0x4F, 0x00, 0x4F, 0x00, 0x4F, 0x00, 0x4F, 0x00,
    0x50, 0x00, 0x50, 0x00, 0x50, 0x00, 0x50, 0x00, 0x51, 0x00, 0x51, 0x00, 0x51, 0x00, 0x51, 0x00,
    0x52, 0x00, 0x52, 0x00, 0x52, 0x00, 0x52, 0x00, 0x53, 0x00, 0x53, 0x00, 0x53, 0x00, 0x53, 0x00,
    0x54, 0x00, 0x54, 0x00, 0x54, 0x00, 0x54, 0x00, 0x55, 0x00, 0x55, 0x00, 0x55, 0x00, 0x55, 0x00,
    0x56, 0x00, 0x56, 0x00, 0x56, 0x00, 0x56, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00,
    0x58, 0x00, 0x58, 0x00, 0x58, 0x00, 0x58, 0x00, 0x59, 0x00, 0x59, 0x00, 0x59, 0x00, 0x59, 0x00,
    0x5A, 0x00, 0x5A, 0x00, 0x5A, 0x00, 0x5A, 0x00, 0x5B, 0x00, 0x5B, 0x00, 0x5B, 0x00, 0x5B, 0x00,
    0x5C, 0x00, 0x5C, 0x00, 0x5C, 0x00, 0x5C, 0x00, 0x5D, 0x00, 0x5D, 0x00, 0x5D, 0x00, 0x5D, 0x00,
    0x5E, 0x00, 0x5E, 0x00, 0x5E, 0x00, 0x5E, 0x00, 0x5F, 0x00, 0x5F, 0x00, 0x5F, 0x00, 0x5F, 0x00,
    0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00,
    0x62, 0x00, 0x62, 0x00, 0x62, 0x00, 0x62, 0x00, 0x63, 0x00, 0x63, 0x00, 0x63, 0x00, 0x63, 0x00,
    0x64, 0x00, 0x64, 0x00, 0x64, 0x00, 0x64, 0x00, 0x65, 0x00, 0x65, 0x00, 0x65, 0x00, 0x65, 0x00,
    0x66, 0x00, 0x66, 0x00, 0x66, 0x00, 0x66, 0x00, 0x67, 0x00, 0x67, 0x00, 0x67, 0x00, 0x67, 0x00,
    0x68, 0x00, 0x68, 0x00, 0x68, 0x00, 0x68, 0x00, 0x69, 0x00, 0x69, 0x00, 0x69, 0x00, 0x69, 0x00,
    0x6A, 0x00, 0x6A, 0x00, 0x6A, 0x00, 0x6A, 0x00, 0x6B, 0x00, 0x6B, 0x00, 0x6B, 0x00, 0x6B, 0x00,
    0x6C, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x6D, 0x00, 0x6D, 0x00, 0x6D, 0x00, 0x6D, 0x00,
    0x6E, 0x00, 0x6E, 0x00, 0x6E, 0x00, 0x6E, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x6F, 0x00,
    0x70, 0x00, 0x70, 0x00, 0x70, 0x00, 0x70, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00,
    0x72, 0x00, 0x72, 0x00, 0x72, 0x00, 0x72, 0x00, 0x73, 0x00, 0x73, 0x00, 0x73, 0x00, 0x73, 0x00,
    0x74, 0x00, 0x74, 0x00, 0x74, 0x00, 0x74, 0x00, 0x75, 0x00, 0x75, 0x00, 0x75, 0x00, 0x75, 0x00,
    0x76, 0x00, 0x76, 0x00, 0x76, 0x00, 0x76, 0x00, 0x77, 0x00, 0x77, 0x00, 0x77, 0x00, 0x77, 0x00,
    0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x79, 0x00, 0x79, 0x00, 0x79, 0x00, 0x79, 0x00,
    0x7A, 0x00, 0x7A, 0x00, 0x7A, 0x00, 0x7A, 0x00, 0x7B, 0x00, 0x7B, 0x00, 0x7B, 0x00, 0x7B, 0x00,
    0x7C, 0x00, 0x7C, 0x00, 0x7C, 0x00, 0x7C, 0x00, 0x7D, 0x00, 0x7D, 0x00, 0x7D, 0x00, 0x7D, 0x00,
    0x7E, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x7F, 0x00, 0x7F, 0x00, 0x7F, 0x00, 0x7F, 0x00,
    0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x81, 0x00, 0x81, 0x00, 0x81, 0x00, 0x81, 0x00,
    0x82, 0x00, 0x82, 0x00, 0x82, 0x00, 0x82, 0x00, 0x83, 0x00, 0x83, 0x00, 0x83, 0x00, 0x83, 0x00,
    0x84, 0x00, 0x84, 0x00, 0x84, 0x00, 0x84, 0x00, 0x85, 0x00, 0x85, 0x00, 0x85, 0x00, 0x85, 0x00,
    0x86, 0x00, 0x86, 0x00, 0x86, 0x00, 0x86, 0x00, 0x87, 0x00, 0x87, 0x00, 0x87, 0x00, 0x87, 0x00,
    0x88, 0x00, 0x88, 0x00, 0x88, 0x00, 0x88, 0x00, 0x89, 0x00, 0x89, 0x00, 0x89, 0x00, 0x89, 0x00,
    0x8A, 0x00, 0x8A, 0x00, 0x8A, 0x00, 0x8A, 0x00, 0x8B, 0x00, 0x8B, 0x00, 0x8B, 0x00, 0x8B, 0x00,
    0x8C, 0x00, 0x8C, 0x00, 0x8C, 0x00, 0x8C, 0x00, 0x8D, 0x00, 0x8D, 0x00, 0x8D, 0x00, 0x8D, 0x00,
    0x8E, 0x00, 0x8E, 0x00, 0x8E, 0x00, 0x8E, 0x00, 0x8F, 0x00, 0x8F, 0x00, 0x8F, 0x00, 0x8F, 0x00,
    0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x91, 0x00, 0x91, 0x00, 0x91, 0x00, 0x91, 0x00,
    0x92, 0x00, 0x92, 0x00, 0x92, 0x00, 0x92, 0x00, 0x93, 0x00, 0x93, 0x00, 0x93, 0x00, 0x93, 0x00,
    0x94, 0x00, 0x94, 0x00, 0x94, 0x00, 0x94, 0x00, 0x95, 0x00, 0x95, 0x00, 0x95, 0x00, 0x95, 0x00,
    0x96, 0x00, 0x96, 0x00, 0x96, 0x00, 0x96, 0x00, 0x97, 0x00, 0x97, 0x00, 0x97, 0x00, 0x97, 0x00,
    0x98, 0x00, 0x98, 0x00, 0x98, 0x00, 0x98, 0x00, 0x99, 0x00, 0x99, 0x00, 0x99, 0x00, 0x99, 0x00,
    0x9A, 0x00, 0x9A, 0x00, 0x9A, 0x00, 0x9A, 0x00, 0x9B, 0x00, 0x9B, 0x00, 0x9B, 0x00, 0x9B, 0x00,
    0x9C, 0x00, 0x9C, 0x00, 0x9C, 0x00, 0x9C, 0x00, 0x9D, 0x00, 0x9D, 0x00, 0x9D, 0x00, 0x9D, 0x00,
    0x9E, 0x00, 0x9E, 0x00, 0x9E, 0x00, 0x9E, 0x00, 0x9F, 0x00, 0x9F, 0x00, 0x9F, 0x00, 0x9F, 0x00,
    0xA0, 0x00, 0xA0, 0x00, 0xA0, 0x00, 0xA0, 0x00, 0xA1, 0x00, 0xA1, 0x00, 0xA1, 0x00, 0xA1, 0x00,
    0xA2, 0x00, 0xA2, 0x00, 0xA2, 0x00, 0xA2, 0x00, 0xA3, 0x00, 0xA3, 0x00, 0xA3, 0x00, 0xA3, 0x00,
    0xA4, 0x00, 0xA4, 0x00, 0xA4, 0x00, 0xA4, 0x00, 0xA5, 0x00, 0xA5, 0x00, 0xA5, 0x00, 0xA5, 0x00,
    0xA6, 0x00, 0xA6, 0x00, 0xA6, 0x00, 0xA6, 0x00, 0xA7, 0x00, 0xA7, 0x00, 0xA7, 0x00, 0xA7, 0x00,
    0xA8, 0x00, 0xA8, 0x00, 0xA8, 0x00, 0xA8, 0x00, 0xA9, 0x00, 0xA9, 0x00, 0xA9, 0x00, 0xA9, 0x00,
    0xAA, 0x00, 0xAA, 0x00, 0xAA, 0x00, 0xAA, 0x00, 0xAB, 0x00, 0xAB, 0x00, 0xAB, 0x00, 0xAB, 0x00,
    0xAC, 0x00, 0xAC, 0x00, 0xAC, 0x00, 0xAC, 0x00, 0xAD, 0x00, 0xAD, 0x00, 0xAD, 0x00, 0xAD, 0x00,
    0xAE, 0x00, 0xAE, 0x00, 0xAE, 0x00, 0xAE, 0x00, 0xAF, 0x00, 0xAF, 0x00, 0xAF, 0x00, 0xAF, 0x00,
    0xB0, 0x00, 0xB0, 0x00, 0xB0, 0x00, 0xB0, 0x00, 0xB1, 0x00, 0xB1, 0x00, 0xB1, 0x00, 0xB1, 0x00,
    0xB2, 0x00, 0xB2, 0x00, 0xB2, 0x00, 0xB2, 0x00, 0xB3, 0x00, 0xB3, 0x00, 0xB3, 0x00, 0xB3, 0x00,
    0xB4, 0x00, 0xB4, 0x00, 0xB4, 0x00, 0xB4, 0x00, 0xB5, 0x00, 0xB5, 0x00, 0xB5, 0x00, 0xB5, 0x00,
    0xB6, 0x00, 0xB6, 0x00, 0xB6, 0x00, 0xB6, 0x00, 0xB7, 0x00, 0xB7, 0x00, 0xB7, 0x00, 0xB7, 0x00,
    0xB8, 0x00, 0xB8, 0x00, 0xB8, 0x00, 0xB8, 0x00, 0xB9, 0x00, 0xB9, 0x00, 0xB9, 0x00, 0xB9, 0x00,
    0xBA, 0x00, 0xBA, 0x00, 0xBA, 0x00, 0xBA, 0x00, 0xBB, 0x00, 0xBB, 0x00, 0xBB, 0x00, 0xBB, 0x00,
    0xBC, 0x00, 0xBC, 0x00, 0xBC, 0x00, 0xBC, 0x00, 0xBD, 0x00, 0xBD, 0x00, 0xBD, 0x00, 0xBD, 0x00,
    0xBE, 0x00, 0xBE, 0x00, 0xBE, 0x00, 0xBE, 0x00, 0xBF, 0x00, 0xBF, 0x00, 0xBF, 0x00, 0xBF, 0x00,
    0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC1, 0x00, 0xC1, 0x00, 0xC1, 0x00, 0xC1, 0x00,
    0xC2, 0x00, 0xC2, 0x00, 0xC2, 0x00, 0xC2, 0x00, 0xC3, 0x00, 0xC3, 0x00, 0xC3, 0x00, 0xC3, 0x00,
    0xC4, 0x00, 0xC4, 0x00, 0xC4, 0x00, 0xC4, 0x00, 0xC5, 0x00, 0xC5, 0x00, 0xC5, 0x00, 0xC5, 0x00,
    0xC6, 0x00, 0xC6, 0x00, 0xC6, 0x00, 0xC6, 0x00, 0xC7, 0x00, 0xC7, 0x00, 0xC7, 0x00, 0xC7, 0x00,
    0xC8, 0x00, 0xC8, 0x00, 0xC8, 0x00, 0xC8, 0x00, 0xC9, 0x00, 0xC9, 0x00, 0xC9, 0x00, 0xC9, 0x00,
    0xCA, 0x00, 0xCA, 0x00, 0xCA, 0x00, 0xCA, 0x00, 0xCB, 0x00, 0xCB, 0x00, 0xCB, 0x00, 0xCB, 0x00,
    0xCC, 0x00, 0xCC, 0x00, 0xCC, 0x00, 0xCC, 0x00, 0xCD, 0x00, 0xCD, 0x00, 0xCD, 0x00, 0xCD, 0x00,
    0xCE, 0x00, 0xCE, 0x00, 0xCE, 0x00, 0xCE, 0x00, 0xCF, 0x00, 0xCF, 0x00, 0xCF, 0x00, 0xCF, 0x00,
    0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD1, 0x00, 0xD1, 0x00, 0xD1, 0x00, 0xD1, 0x00,
    0xD2, 0x00, 0xD2, 0x00, 0xD2, 0x00, 0xD2, 0x00, 0xD3, 0x00, 0xD3, 0x00, 0xD3, 0x00, 0xD3, 0x00,
    0xD4, 0x00, 0xD4, 0x00, 0xD4, 0x00, 0xD4, 0x00, 0xD5, 0x00, 0xD5, 0x00, 0xD5, 0x00, 0xD5, 0x00,
    0xD6, 0x00, 0xD6, 0x00, 0xD6, 0x00, 0xD6, 0x00, 0xD7, 0x00, 0xD7, 0x00, 0xD7, 0x00, 0xD7, 0x00,
    0xD8, 0x00, 0xD8, 0x00, 0xD8, 0x00, 0xD8, 0x00, 0xD9, 0x00, 0xD9, 0x00, 0xD9, 0x00, 0xD9, 0x00,
    0xDA, 0x00, 0xDA, 0x00, 0xDA, 0x00, 0xDA, 0x00, 0xDB, 0x00, 0xDB, 0x00, 0xDB, 0x00, 0xDB, 0x00,
    0xDC, 0x00, 0xDC, 0x00, 0xDC, 0x00, 0xDC, 0x00, 0xDD, 0x00, 0xDD, 0x00, 0xDD, 0x00, 0xDD, 0x00,
    0xDE, 0x00, 0xDE, 0x00, 0xDE, 0x00, 0xDE, 0x00, 0xDF, 0x00, 0xDF, 0x00, 0xDF, 0x00, 0xDF, 0x00,
    0xE0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0xE1, 0x00, 0xE1, 0x00, 0xE1, 0x00, 0xE1, 0x00,
    0xE2, 0x00, 0xE2, 0x00, 0xE2, 0x00, 0xE2, 0x00, 0xE3, 0x00, 0xE3, 0x00, 0xE3, 0x00, 0xE3, 0x00,
    0xE4, 0x00, 0xE4, 0x00, 0xE4, 0x00, 0xE4, 0x00, 0xE5, 0x00, 0xE5, 0x00, 0xE5, 0x00, 0xE5, 0x00,
    0xE6, 0x00, 0xE6, 0x00, 0xE6, 0x00, 0xE6, 0x00, 0xE7, 0x00, 0xE7, 0x00, 0xE7, 0x00, 0xE7, 0x00,
    0xE8, 0x00, 0xE8, 0x00, 0xE8, 0x00, 0xE8, 0x00, 0xE9, 0x00, 0xE9, 0x00, 0xE9, 0x00, 0xE9, 0x00,
    0xEA, 0x00, 0xEA, 0x00, 0xEA, 0x00, 0xEA, 0x00, 0xEB, 0x00, 0xEB, 0x00, 0xEB, 0x00, 0xEB, 0x00,
    0xEC, 0x00, 0xEC, 0x00, 0xEC, 0x00, 0xEC, 0x00, 0xED, 0x00, 0xED, 0x00, 0xED, 0x00, 0xED, 0x00,
    0xEE, 0x00, 0xEE, 0x00, 0xEE, 0x00, 0xEE, 0x00, 0xEF, 0x00, 0xEF, 0x00, 0xEF, 0x00, 0xEF, 0x00,
    0xF0, 0x00, 0xF0, 0x00, 0xF0, 0x00, 0xF0, 0x00, 0xF1, 0x00, 0xF1, 0x00, 0xF1, 0x00, 0xF1, 0x00,
    0xF2, 0x00, 0xF2, 0x00, 0xF2, 0x00, 0xF2, 0x00, 0xF3, 0x00, 0xF3, 0x00, 0xF3, 0x00, 0xF3, 0x00,
    0xF4, 0x00, 0xF4, 0x00, 0xF4, 0x00, 0xF4, 0x00, 0xF5, 0x00, 0xF5, 0x00, 0xF5, 0x00, 0xF5, 0x00,
    0xF6, 0x00, 0xF6, 0x00, 0xF6, 0x00, 0xF6, 0x00, 0xF7, 0x00, 0xF7, 0x00, 0xF7, 0x00, 0xF7, 0x00,
    0xF8, 0x00, 0xF8, 0x00, 0xF8, 0x00, 0xF8, 0x00, 0xF9, 0x00, 0xF9, 0x00, 0xF9, 0x00, 0xF9, 0x00,
    0xFA, 0x00, 0xFA, 0x00, 0xFA, 0x00, 0xFA, 0x00, 0xFB, 0x00, 0xFB, 0x00, 0xFB, 0x00, 0xFB, 0x00,
    0xFC, 0x00, 0xFC, 0x00, 0xFC, 0x00, 0xFC, 0x00, 0xFD, 0x00, 0xFD, 0x00, 0xFD, 0x00, 0xFD, 0x00,
    0xFE, 0x00, 0xFE, 0x00, 0xFE, 0x00, 0xFE, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00,
    0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x01, 0xFF, 0x01, 0xFF, 0x01, 0xFF, 0x01, 0x02, 0xFF,
    0x02, 0xFF, 0x02, 0xFF, 0x02, 0x03, 0xFF, 0x03, 0xFF, 0x03, 0xFF, 0x03, 0x04, 0xFF, 0x04, 0xFF,
    0x04, 0xFF, 0x04, 0x05, 0xFF, 0x05, 0xFF, 0x05, 0xFF, 0x05, 0x06, 0xFF, 0x06, 0xFF, 0x06, 0xFF,
    0x06, 0x07, 0xFF, 0x07, 0xFF, 0x07, 0xFF, 0x07, 0x08, 0xFF, 0x08, 0xFF, 0x08, 0xFF, 0x08, 0x09,
    0xFF, 0x09, 0xFF, 0x09, 0xFF, 0x09, 0x0A, 0xFF, 0x0A, 0xFF, 0x0A, 0xFF, 0x0A, 0x0B, 0xFF, 0x0B,
    0xFF, 0x0B, 0xFF, 0x0B, 0x0C, 0xFF, 0x0C, 0xFF, 0x0C, 0xFF, 0x0C, 0x0D, 0xFF, 0x0D, 0xFF, 0x0D,
    0xFF, 0x0D, 0x0E, 0xFF, 0x0E, 0xFF, 0x0E, 0xFF, 0x0E, 0x0F, 0xFF, 0x0F, 0xFF, 0x0F, 0xFF, 0x0F,
    0x10, 0xFF, 0x10, 0xFF, 0x10, 0xFF, 0x10, 0x11, 0xFF, 0x11, 0xFF, 0x11, 0xFF, 0x11, 0x12, 0xFF,
    0x12, 0xFF, 0x12, 0xFF, 0x12, 0x13, 0xFF, 0x13, 0xFF, 0x13, 0xFF, 0x13, 0x14, 0xFF, 0x14, 0xFF,
    0x14, 0xFF, 0x14, 0x15, 0xFF, 0x15, 0xFF, 0x15, 0xFF, 0x15, 0x16, 0xFF, 0x16, 0xFF, 0x16, 0xFF,
    0x16, 0x17, 0xFF, 0x17, 0xFF, 0x17, 0xFF, 0x17, 0x18, 0xFF, 0x18, 0xFF, 0x18, 0xFF, 0x18, 0x19,
    0xFF, 0x19, 0xFF, 0x19, 0xFF, 0x19, 0x1A, 0xFF, 0x1A, 0xFF, 0x1A, 0xFF, 0x1A, 0x1B, 0xFF, 0x1B,
    0xFF, 0x1B, 0xFF, 0x1B, 0x1C, 0xFF, 0x1C, 0xFF, 0x1C, 0xFF, 0x1C, 0x1D, 0xFF, 0x1D, 0xFF, 0x1D,
    0xFF, 0x1D, 0x1E, 0xFF, 0x1E, 0xFF, 0x1E, 0xFF, 0x1E, 0x1F, 0xFF, 0x1F, 0xFF, 0x1F, 0xFF, 0x1F,
    0x20, 0xFF, 0x20, 0xFF, 0x20, 0xFF, 0x20, 0x21, 0xFF, 0x21, 0xFF, 0x21, 0xFF, 0x21, 0x22, 0xFF,
    0x22, 0xFF, 0x22, 0xFF, 0x22, 0x23, 0xFF, 0x23, 0xFF, 0x23, 0xFF, 0x23, 0x24, 0xFF, 0x24, 0xFF,
    0x24, 0xFF, 0x24, 0x25, 0xFF, 0x25, 0xFF, 0x25, 0xFF, 0x25, 0x26, 0xFF, 0x26, 0xFF, 0x26, 0xFF,
    0x26, 0x27, 0xFF, 0x27, 0xFF, 0x27, 0xFF, 0x27, 0x28, 0xFF, 0x28, 0xFF, 0x28, 0xFF, 0x28, 0x29,
    0xFF, 0x29, 0xFF, 0x29, 0xFF, 0x29, 0x2A, 0xFF, 0x2A, 0xFF, 0x2A, 0xFF, 0x2A, 0x2B, 0xFF, 0x2B,
    0xFF, 0x2B, 0xFF, 0x2B, 0x2C, 0xFF, 0x2C, 0xFF, 0x2C, 0xFF, 0x2C, 0x2D, 0xFF, 0x2D, 0xFF, 0x2D,
    0xFF, 0x2D, 0x2E, 0xFF, 0x2E, 0xFF, 0x2E, 0xFF, 0x2E, 0x2F, 0xFF, 0x2F, 0xFF, 0x2F, 0xFF, 0x2F,
    0x30, 0xFF, 0x30, 0xFF, 0x30, 0xFF, 0x30, 0x31, 0xFF, 0x31, 0xFF, 0x31, 0xFF, 0x31, 0x32, 0xFF,
    0x32, 0xFF, 0x32, 0xFF, 0x32, 0x33, 0xFF, 0x33, 0xFF, 0x33, 0xFF, 0x33, 0x34, 0xFF, 0x34, 0xFF,
    0x34, 0xFF, 0x34, 0x35, 0xFF, 0x35, 0xFF, 0x35, 0xFF, 0x35, 0x36, 0xFF, 0x36, 0xFF, 0x36, 0xFF,
    0x36, 0x37, 0xFF, 0x37, 0xFF, 0x37, 0xFF, 0x37, 0x38, 0xFF, 0x38, 0xFF, 0x38, 0xFF, 0x38, 0x39,
    0xFF, 0x39, 0xFF, 0x39, 0xFF, 0x39, 0x3A, 0xFF, 0x3A, 0xFF, 0x3A, 0xFF, 0x3A, 0x3B, 0xFF, 0x3B,
    0xFF, 0x3B, 0xFF, 0x3B, 0x3C, 0xFF, 0x3C, 0xFF, 0x3C, 0xFF, 0x3C, 0x3D, 0xFF, 0x3D, 0xFF, 0x3D,
    0xFF, 0x3D, 0x3E, 0xFF, 0x3E, 0xFF, 0x3E, 0xFF, 0x3E, 0x3F, 0xFF, 0x3F, 0xFF, 0x3F, 0xFF, 0x3F,
    0x40, 0xFF, 0x40, 0xFF, 0x40, 0xFF, 0x40, 0x41, 0xFF, 0x41, 0xFF, 0x41, 0xFF, 0x41, 0x42, 0xFF,
    0x42, 0xFF, 0x42, 0xFF, 0x42, 0x43, 0xFF, 0x43, 0xFF, 0x43, 0xFF, 0x43, 0x44, 0xFF, 0x44, 0xFF,
    0x44, 0xFF, 0x44, 0x45, 0xFF, 0x45, 0xFF, 0x45, 0xFF, 0x45, 0x46, 0xFF, 0x46, 0xFF, 0x46, 0xFF,
    0x46, 0x47, 0xFF, 0x47, 0xFF, 0x47, 0xFF, 0x47, 0x48, 0xFF, 0x48, 0xFF, 0x48, 0xFF, 0x48, 0x49,
    0xFF, 0x49, 0xFF, 0x49, 0xFF, 0x49, 0x4A, 0xFF, 0x4A, 0xFF, 0x4A, 0xFF, 0x4A, 0x4B, 0xFF, 0x4B,
    0xFF, 0x4B, 0xFF, 0x4B, 0x4C, 0xFF, 0x4C, 0xFF, 0x4C, 0xFF, 0x4C, 0x4D, 0xFF, 0x4D, 0xFF, 0x4D,
    0xFF, 0x4D, 0x4E, 0xFF, 0x4E, 0xFF, 0x4E, 0xFF, 0x4E, 0x4F, 0xFF, 0x4F, 0xFF, 0x4F, 0xFF, 0x4F,
    0x50, 0xFF, 0x50, 0xFF, 0x50, 0xFF, 0x50, 0x51, 0xFF, 0x51, 0xFF, 0x51, 0xFF, 0x51, 0x52, 0xFF,
    0x52, 0xFF, 0x52, 0xFF, 0x52, 0x53, 0xFF, 0x53, 0xFF, 0x53, 0xFF, 0x53, 0x54, 0xFF, 0x54, 0xFF,
    0x54, 0xFF, 0x54, 0x55, 0xFF, 0x55, 0xFF, 0x55, 0xFF, 0x55, 0x56, 0xFF, 0x56, 0xFF, 0x56, 0xFF,
    0x56, 0x57, 0xFF, 0x57, 0xFF, 0x57, 0xFF, 0x57, 0x58, 0xFF, 0x58, 0xFF, 0x58, 0xFF, 0x58, 0x59,
    0xFF, 0x59, 0xFF, 0x59, 0xFF, 0x59, 0x5A, 0xFF, 0x5A, 0xFF, 0x5A, 0xFF, 0x5A, 0x5B, 0xFF, 0x5B,
    0xFF, 0x5B, 0xFF, 0x5B, 0x5C, 0xFF, 0x5C, 0xFF, 0x5C, 0xFF, 0x5C, 0x5D, 0xFF, 0x5D, 0xFF, 0x5D,
    0xFF, 0x5D, 0x5E, 0xFF, 0x5E, 0xFF, 0x5E, 0xFF, 0x5E, 0x5F, 0xFF, 0x5F, 0xFF, 0x5F, 0xFF, 0x5F,
    0x60, 0xFF, 0x60, 0xFF, 0x60, 0xFF, 0x60, 0x61, 0xFF, 0x61, 0xFF, 0x61, 0xFF, 0x61, 0x62, 0xFF,
    0x62, 0xFF, 0x62, 0xFF, 0x62, 0x63, 0xFF, 0x63, 0xFF, 0x63, 0xFF, 0x63, 0x64, 0xFF, 0x64, 0xFF,
    0x64, 0xFF, 0x64, 0x65, 0xFF, 0x65, 0xFF, 0x65, 0xFF, 0x65, 0x66, 0xFF, 0x66, 0xFF, 0x66, 0xFF,
    0x66, 0x67, 0xFF, 0x67, 0xFF, 0x67, 0xFF, 0x67, 0x68, 0xFF, 0x68, 0xFF, 0x68, 0xFF, 0x68, 0x69,
    0xFF, 0x69, 0xFF, 0x69, 0xFF, 0x69, 0x6A, 0xFF, 0x6A, 0xFF, 0x6A, 0xFF, 0x6A, 0x6B, 0xFF, 0x6B,
    0xFF, 0x6B, 0xFF, 0x6B, 0x6C, 0xFF, 0x6C, 0xFF, 0x6C, 0xFF, 0x6C, 0x6D, 0xFF, 0x6D, 0xFF, 0x6D,
    0xFF, 0x6D, 0x6E, 0xFF, 0x6E, 0xFF, 0x6E, 0xFF, 0x6E, 0x6F, 0xFF, 0x6F, 0xFF, 0x6F, 0xFF, 0x6F,
    0x70, 0xFF, 0x70, 0xFF, 0x70, 0xFF, 0x70, 0x71, 0xFF, 0x71, 0xFF, 0x71, 0xFF, 0x71, 0x72, 0xFF,
    0x72, 0xFF, 0x72, 0xFF, 0x72, 0x73, 0xFF, 0x73, 0xFF, 0x73, 0xFF, 0x73, 0x74, 0xFF, 0x74, 0xFF,
    0x74, 0xFF, 0x74, 0x75, 0xFF, 0x75, 0xFF, 0x75, 0xFF, 0x75, 0x76, 0xFF, 0x76, 0xFF, 0x76, 0xFF,
    0x76, 0x77, 0xFF, 0x77, 0xFF, 0x77, 0xFF, 0x77, 0x78, 0xFF, 0x78, 0xFF, 0x78, 0xFF, 0x78, 0x79,
    0xFF, 0x79, 0xFF, 0x79, 0xFF, 0x79, 0x7A, 0xFF, 0x7A, 0xFF, 0x7A, 0xFF, 0x7A, 0x7B, 0xFF, 0x7B,
    0xFF, 0x7B, 0xFF, 0x7B, 0x7C, 0xFF, 0x7C, 0xFF, 0x7C, 0xFF, 0x7C, 0x7D, 0xFF, 0x7D, 0xFF, 0x7D,
    0xFF, 0x7D, 0x7E, 0xFF, 0x7E, 0xFF, 0x7E, 0xFF, 0x7E, 0x7F, 0xFF, 0x7F, 0xFF, 0x7F, 0xFF, 0x7F,
    0x80, 0xFF, 0x80, 0xFF, 0x80, 0xFF, 0x80, 0x81, 0xFF, 0x81, 0xFF, 0x81, 0xFF, 0x81, 0x82, 0xFF,
    0x82, 0xFF, 0x82, 0xFF, 0x82, 0x83, 0xFF, 0x83, 0xFF, 0x83, 0xFF, 0x83, 0x84, 0xFF, 0x84, 0xFF,
    0x84, 0xFF, 0x84, 0x85, 0xFF, 0x85, 0xFF, 0x85, 0xFF, 0x85, 0x86, 0xFF, 0x86, 0xFF, 0x86, 0xFF,
    0x86, 0x87, 0xFF, 0x87, 0xFF, 0x87, 0xFF, 0x87, 0x88, 0xFF, 0x88, 0xFF, 0x88, 0xFF, 0x88, 0x89,
    0xFF, 0x89, 0xFF, 0x89, 0xFF, 0x89, 0x8A, 0xFF, 0x8A, 0xFF, 0x8A, 0xFF, 0x8A, 0x8B, 0xFF, 0x8B,
    0xFF, 0x8B, 0xFF, 0x8B, 0x8C, 0xFF, 0x8C, 0xFF, 0x8C, 0xFF, 0x8C, 0x8D, 0xFF, 0x8D, 0xFF, 0x8D,
    0xFF, 0x8D, 0x8E, 0xFF, 0x8E, 0xFF, 0x8E, 0xFF, 0x8E, 0x8F, 0xFF, 0x8F, 0xFF, 0x8F, 0xFF, 0x8F,
    0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x91, 0xFF, 0x91, 0xFF, 0x91, 0xFF, 0x91, 0x92, 0xFF,
    0x92, 0xFF, 0x92, 0xFF, 0x92, 0x93, 0xFF, 0x93, 0xFF, 0x93, 0xFF, 0x93, 0x94, 0xFF, 0x94, 0xFF,
    0x94, 0xFF, 0x94, 0x95, 0xFF, 0x95, 0xFF, 0x95, 0xFF, 0x95, 0x96, 0xFF, 0x96, 0xFF, 0x96, 0xFF,
    0x96, 0x97, 0xFF, 0x97, 0xFF, 0x97, 0xFF, 0x97, 0x98, 0xFF, 0x98, 0xFF, 0x98, 0xFF, 0x98, 0x99,
    0xFF, 0x99, 0xFF, 0x99, 0xFF, 0x99, 0x9A, 0xFF, 0x9A, 0xFF, 0x9A, 0xFF, 0x9A, 0x9B, 0xFF, 0x9B,
    0xFF, 0x9B, 0xFF, 0x9B, 0x9C, 0xFF, 0x9C, 0xFF, 0x9C, 0xFF, 0x9C, 0x9D, 0xFF, 0x9D, 0xFF, 0x9D,
    0xFF, 0x9D, 0x9E, 0xFF, 0x9E, 0xFF, 0x9E, 0xFF, 0x9E, 0x9F, 0xFF, 0x9F, 0xFF, 0x9F, 0xFF, 0x9F,
    0xA0, 0xFF, 0xA0, 0xFF, 0xA0, 0xFF, 0xA0, 0xA1, 0xFF, 0xA1, 0xFF, 0xA1, 0xFF, 0xA1, 0xA2, 0xFF,
    0xA2, 0xFF, 0xA2, 0xFF, 0xA2, 0xA3, 0xFF, 0xA3, 0xFF, 0xA3, 0xFF, 0xA3, 0xA4, 0xFF, 0xA4, 0xFF,
    0xA4, 0xFF, 0xA4, 0xA5, 0xFF, 0xA5, 0xFF, 0xA5, 0xFF, 0xA5, 0xA6, 0xFF, 0xA6, 0xFF, 0xA6, 0xFF,
    0xA6, 0xA7, 0xFF, 0xA7, 0xFF, 0xA7, 0xFF, 0xA7, 0xA8, 0xFF, 0xA8, 0xFF, 0xA8, 0xFF, 0xA8, 0xA9,
    0xFF, 0xA9, 0xFF, 0xA9, 0xFF, 0xA9, 0xAA, 0xFF, 0xAA, 0xFF, 0xAA, 0xFF, 0xAA, 0xAB, 0xFF, 0xAB,
    0xFF, 0xAB, 0xFF, 0xAB, 0xAC, 0xFF, 0xAC, 0xFF, 0xAC, 0xFF, 0xAC, 0xAD, 0xFF, 0xAD, 0xFF, 0xAD,
    0xFF, 0xAD, 0xAE, 0xFF, 0xAE, 0xFF, 0xAE, 0xFF, 0xAE, 0xAF, 0xFF, 0xAF, 0xFF, 0xAF, 0xFF, 0xAF,
    0xB0, 0xFF, 0xB0, 0xFF, 0xB0, 0xFF, 0xB0, 0xB1, 0xFF, 0xB1, 0xFF, 0xB1, 0xFF, 0xB1, 0xB2, 0xFF,
    0xB2, 0xFF, 0xB2, 0xFF, 0xB2, 0xB3, 0xFF, 0xB3, 0xFF, 0xB3, 0xFF, 0xB3, 0xB4, 0xFF, 0xB4, 0xFF,
    0xB4, 0xFF, 0xB4, 0xB5, 0xFF, 0xB5, 0xFF, 0xB5, 0xFF, 0xB5, 0xB6, 0xFF, 0xB6, 0xFF, 0xB6, 0xFF,
    0xB6, 0xB7, 0xFF, 0xB7, 0xFF, 0xB7, 0xFF, 0xB7, 0xB8, 0xFF, 0xB8, 0xFF, 0xB8, 0xFF, 0xB8, 0xB9,
    0xFF, 0xB9, 0xFF, 0xB9, 0xFF, 0xB9, 0xBA, 0xFF, 0xBA, 0xFF, 0xBA, 0xFF, 0xBA, 0xBB, 0xFF, 0xBB,
    0xFF, 0xBB, 0xFF, 0xBB, 0xBC, 0xFF, 0xBC, 0xFF, 0xBC, 0xFF, 0xBC, 0xBD, 0xFF, 0xBD, 0xFF, 0xBD,
    0xFF, 0xBD, 0xBE, 0xFF, 0xBE, 0xFF, 0xBE, 0xFF, 0xBE, 0xBF, 0xFF, 0xBF, 0xFF, 0xBF, 0xFF, 0xBF,
    0xC0, 0xFF, 0xC0, 0xFF, 0xC0, 0xFF, 0xC0, 0xC1, 0xFF, 0xC1, 0xFF, 0xC1, 0xFF, 0xC1, 0xC2, 0xFF,
    0xC2, 0xFF, 0xC2, 0xFF, 0xC2, 0xC3, 0xFF, 0xC3, 0xFF, 0xC3, 0xFF, 0xC3, 0xC4, 0xFF, 0xC4, 0xFF,
    0xC4, 0xFF, 0xC4, 0xC5, 0xFF, 0xC5, 0xFF, 0xC5, 0xFF, 0xC5, 0xC6, 0xFF, 0xC6, 0xFF, 0xC6, 0xFF,
    0xC6, 0xC7, 0xFF, 0xC7, 0xFF, 0xC7, 0xFF, 0xC7, 0xC8, 0xFF, 0xC8, 0xFF, 0xC8, 0xFF, 0xC8, 0xC9,
    0xFF, 0xC9, 0xFF, 0xC9, 0xFF, 0xC9, 0xCA, 0xFF, 0xCA, 0xFF, 0xCA, 0xFF, 0xCA, 0xCB, 0xFF, 0xCB,
    0xFF, 0xCB, 0xFF, 0xCB, 0xCC, 0xFF, 0xCC, 0xFF, 0xCC, 0xFF, 0xCC, 0xCD, 0xFF, 0xCD, 0xFF, 0xCD,
    0xFF, 0xCD, 0xCE, 0xFF, 0xCE, 0xFF, 0xCE, 0xFF, 0xCE, 0xCF, 0xFF, 0xCF, 0xFF, 0xCF, 0xFF, 0xCF,
    0xD0, 0xFF, 0xD0, 0xFF, 0xD0, 0xFF, 0xD0, 0xD1, 0xFF, 0xD1, 0xFF, 0xD1, 0xFF, 0xD1, 0xD2, 0xFF,
    0xD2, 0xFF, 0xD2, 0xFF, 0xD2, 0xD3, 0xFF, 0xD3, 0xFF, 0xD3, 0xFF, 0xD3, 0xD4, 0xFF, 0xD4, 0xFF,
    0xD4, 0xFF, 0xD4, 0xD5, 0xFF, 0xD5, 0xFF, 0xD5, 0xFF, 0xD5, 0xD6, 0xFF, 0xD6, 0xFF, 0xD6, 0xFF,
    0xD6, 0xD7, 0xFF, 0xD7, 0xFF, 0xD7, 0xFF, 0xD7, 0xD8, 0xFF, 0xD8, 0xFF, 0xD8, 0xFF, 0xD8, 0xD9,
    0xFF, 0xD9, 0xFF, 0xD9, 0xFF, 0xD9, 0xDA, 0xFF, 0xDA, 0xFF, 0xDA, 0xFF, 0xDA, 0xDB, 0xFF, 0xDB,
    0xFF, 0xDB, 0xFF, 0xDB, 0xDC, 0xFF, 0xDC, 0xFF, 0xDC, 0xFF, 0xDC, 0xDD, 0xFF, 0xDD, 0xFF, 0xDD,
    0xFF, 0xDD, 0xDE, 0xFF, 0xDE, 0xFF, 0xDE, 0xFF, 0xDE, 0xDF, 0xFF, 0xDF, 0xFF, 0xDF, 0xFF, 0xDF,
    0xE0, 0xFF, 0xE0, 0xFF, 0xE0, 0xFF, 0xE0, 0xE1, 0xFF, 0xE1, 0xFF, 0xE1, 0xFF, 0xE1, 0xE2, 0xFF,
    0xE2, 0xFF, 0xE2, 0xFF, 0xE2, 0xE3, 0xFF, 0xE3, 0xFF, 0xE3, 0xFF, 0xE3, 0xE4, 0xFF, 0xE4, 0xFF,
    0xE4, 0xFF, 0xE4, 0xE5, 0xFF, 0xE5, 0xFF, 0xE5, 0xFF, 0xE5, 0xE6, 0xFF, 0xE6, 0xFF, 0xE6, 0xFF,
    0xE6, 0xE7, 0xFF, 0xE7, 0xFF, 0xE7, 0xFF, 0xE7, 0xE8, 0xFF, 0xE8, 0xFF, 0xE8, 0xFF, 0xE8, 0xE9,
    0xFF, 0xE9, 0xFF, 0xE9, 0xFF, 0xE9, 0xEA, 0xFF, 0xEA, 0xFF, 0xEA, 0xFF, 0xEA, 0xEB, 0xFF, 0xEB,
    0xFF, 0xEB, 0xFF, 0xEB, 0xEC, 0xFF, 0xEC, 0xFF, 0xEC, 0xFF, 0xEC, 0xED, 0xFF, 0xED, 0xFF, 0xED,
    0xFF, 0xED, 0xEE, 0xFF, 0xEE, 0xFF, 0xEE, 0xFF, 0xEE, 0xEF, 0xFF, 0xEF, 0xFF, 0xEF, 0xFF, 0xEF,
    0xF0, 0xFF, 0xF0, 0xFF, 0xF0, 0xFF, 0xF0, 0xF1, 0xFF, 0xF1, 0xFF, 0xF1, 0xFF, 0xF1, 0xF2, 0xFF,
    0xF2, 0xFF, 0xF2, 0xFF, 0xF2, 0xF3, 0xFF, 0xF3, 0xFF, 0xF3, 0xFF, 0xF3, 0xF4, 0xFF, 0xF4, 0xFF,
    0xF4, 0xFF, 0xF4, 0xF5, 0xFF, 0xF5, 0xFF, 0xF5, 0xFF, 0xF5, 0xF6, 0xFF, 0xF6, 0xFF, 0xF6, 0xFF,
    0xF6, 0xF7, 0xFF, 0xF7, 0xFF, 0xF7, 0xFF, 0xF7, 0xF8, 0xFF, 0xF8, 0xFF, 0xF8, 0xFF, 0xF8, 0xF9,
    0xFF, 0xF9, 0xFF, 0xF9, 0xFF, 0xF9, 0xFA, 0xFF, 0xFA, 0xFF, 0xFA, 0xFF, 0xFA, 0xFB, 0xFF, 0xFB,
    0xFF, 0xFB, 0xFF, 0xFB, 0xFC, 0xFF, 0xFC, 0xFF, 0xFC, 0xFF, 0xFC, 0xFD, 0xFF, 0xFD, 0xFF, 0xFD,
    0xFF, 0xFD, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

class Lz0103Decompressor
{
public:
    explicit Lz0103Decompressor(bool rle);

    [[nodiscard]] auto decompress(const uint8_t* data, const size_t size) -> std::vector<uint8_t>;

    void emitLiterals(size_t length);
    void emitLiterals(size_t length, uint8_t value);
    void emitMatch(size_t offset, size_t length);
    void advance(size_t length);

private:
    bool m_rle{false};
    std::vector<uint8_t> m_preData;
    size_t m_zeroOffset;
    size_t m_ringBufferOffset;
    squeeze::LzDecompressor<true> m_lzss;
};

Lz0103Decompressor::Lz0103Decompressor(bool rle)
    : m_rle{rle}
{
    m_preData.resize(4096, 0);
    auto iter = m_preData.begin() + (0x1000 - (m_rle ? 0xfef : 0xfee));
    for (auto i = 0U; i < 0x100; ++i, iter += 8)
    {
        iter[0] = iter[2] = iter[4] = iter[6] = static_cast<uint8_t>(i);
    }
    for (auto i = 0U; i < 0x100; ++i, iter += 7)
    {
        iter[0] = iter[2] = iter[4] = iter[6] = static_cast<uint8_t>(i);
        iter[1] = iter[3] = iter[5] = 0xFF;
    }
}

auto Lz0103Decompressor::decompress(const uint8_t* data, const size_t size) -> std::vector<uint8_t>
{
    m_ringBufferOffset = 0;
    m_zeroOffset = 0x1000 - (m_rle ? 0xfef : 0xfee);
    uint8_t control{0xff};
    unsigned int bitsRemaining{0};
    m_lzss.reset(data, size, m_preData.data(), m_preData.size());

    while (!m_lzss.isAtEnd())
    {
        if (bitsRemaining == 0)
        {
            control = m_lzss.fetch();
            bitsRemaining = 8;
        }
        bitsRemaining -= 1;

        if (control & 1)
        {
            emitLiterals(1);
        }
        else
        {
            auto const nextControl1 = m_lzss.fetch();
            auto const nextControl2 = m_lzss.fetch();
            const uint8_t control1 = nextControl2 & 0x0F;
            const uint8_t control2 = nextControl2 >> 4;
            if (m_rle && control1 == 0x0F)
            {
                uint16_t runLength;
                uint8_t value;
                if (control2 == 0x00)
                {
                    runLength = nextControl1 + 19;
                    value = m_lzss.fetch();
                }
                else
                {
                    runLength = control2 + 3;
                    value = nextControl1;
                }
                emitLiterals(runLength, value);
            }
            else
            {
                const uint16_t referenceLength = 3 + control1;
                const uint16_t referenceOffset = nextControl1 | (control2 << 8);
                auto const absoluteOffset =
                    (m_zeroOffset + referenceOffset - m_ringBufferOffset) % 4096;
                auto const offset = 4096 - absoluteOffset;
                emitMatch(offset, referenceLength);
            }
        }
        control >>= 1;
    }
    auto decompressed = m_lzss.finish();
    // decompressed.erase(decompressed.begin(), decompressed.begin() + m_preData.size());
    return decompressed;
}

void Lz0103Decompressor::emitLiterals(size_t length)
{
    m_lzss.emitLiterals(length);
    advance(length);
}

void Lz0103Decompressor::emitLiterals(size_t length, uint8_t value)
{
    m_lzss.emitLiterals(length, value);
    advance(length);
}

void Lz0103Decompressor::emitMatch(size_t offset, size_t length)
{
    m_lzss.emitMatch(offset, length);
    advance(length);
}

void Lz0103Decompressor::advance(size_t length)
{
    m_ringBufferOffset += length;
    if (m_ringBufferOffset >= m_zeroOffset)
    {
        m_zeroOffset += 4096;
    }
}

auto decompressLz01(const uint8_t* data, const size_t size) -> std::vector<uint8_t>
{
    Lz0103Decompressor lz{false};
    return lz.decompress(data, size);
}

auto decompressLz03(const uint8_t* data, const size_t size) -> std::vector<uint8_t>
{
    Lz0103Decompressor lz{true};
    return lz.decompress(data, size);
}

class Lz0103Compressor
{
public:
    explicit Lz0103Compressor(const uint8_t* data, const size_t size, size_t zeroOffset)
        : m_data{data}
        , m_end{data + size}
        , m_zeroOffset{zeroOffset}
        , m_ringBufferOffset{0}
    {
        m_compressed.push_back(0x00);
        m_lastFlag = 0;
    }

    void consumeMatch(const uint8_t* begin, const uint8_t* end, const unsigned int cls,
                      const Match& match)
    {
        m_compressed[m_lastFlag] >>= 1;

        encodeMatch(match);
        advance(match.length);
    }

    void encodeMatch(const Match& match)
    {
        auto const offset = 4096 - match.offset + m_ringBufferOffset;
        auto const blub = (offset - m_zeroOffset) % 4096;

        const uint8_t b = (match.length - 3) | ((blub >> 8) << 4);
        const uint8_t a = blub & 0xff;
        m_compressed.push_back(a);
        m_compressed.push_back(b);
    }

    void consumeLiteral(const uint8_t* pos)
    {
        m_compressed[m_lastFlag] >>= 1;
        m_compressed[m_lastFlag] |= 0x80;
        m_compressed.push_back(*pos);
        advance(1);
    }

    void consumeRLE(const uint8_t* pos, size_t length)
    {
    }

    void advance(size_t length)
    {
        m_ringBufferOffset += length;
        if (m_ringBufferOffset >= m_zeroOffset)
        {
            m_zeroOffset += 4096;
        }

        if (--m_flagsLeft == 0)
        {
            m_flagsLeft = 8;
            m_lastFlag = m_compressed.size();
            m_compressed.push_back(0x00);
        }
    }

    auto finish() -> std::vector<uint8_t>
    {
        if (m_flagsLeft == 8)
        {
            m_compressed.pop_back();
        }
        return std::move(m_compressed);
    }

private:
    std::vector<uint8_t> m_compressed;
    const uint8_t* m_data{nullptr};
    const uint8_t* m_end{nullptr};
    size_t m_lastFlag{0};
    uint8_t m_flagsLeft{8};
    size_t m_zeroOffset;
    size_t m_ringBufferOffset;
};

class Lz01Compressor : public Lz0103Compressor
{
public:
    explicit Lz01Compressor(uint8_t* data, size_t size)
        : Lz0103Compressor{data, size, 0x12}
    {
    }
};

class Lz03Compressor : public Lz0103Compressor
{
public:
    explicit Lz03Compressor(uint8_t* data, size_t size)
        : Lz0103Compressor{data, size, 0x11}
    {
    }
};

auto compressLz03(const uint8_t* data, const size_t size) -> std::vector<uint8_t>
{
    std::vector<uint8_t> prefixedData(size + 4096);
    std::memcpy(prefixedData.data() + 4096, data, size);
    auto iter = prefixedData.begin() + (0x1000 - 0xfef);
    for (auto i = 0U; i < 0x100; ++i, iter += 8)
    {
        iter[0] = iter[2] = iter[4] = iter[6] = static_cast<uint8_t>(i);
    }
    for (auto i = 0U; i < 0x100; ++i, iter += 7)
    {
        iter[0] = iter[2] = iter[4] = iter[6] = static_cast<uint8_t>(i);
        iter[1] = iter[3] = iter[5] = 0xFF;
    }

    Lz03Compressor lz0103(prefixedData.data(), prefixedData.size());
    squeeze::LzCompressor<squeeze::BinaryTreeMatcher<1>> lz{squeeze::BinaryTreeMatcher<1>{4096}};
    lz.matcher().configureMatchClass(0, MatchClass{0, {3, 17}, {1, 4096}});
    lz.compress(prefixedData.data(), prefixedData.size(), lz0103, 4096);
    return lz0103.finish();
}

auto compressLz01(const uint8_t* data, const size_t size) -> std::vector<uint8_t>
{
    std::vector<uint8_t> prefixedData(size + 4096);
    std::memcpy(prefixedData.data() + 4096, data, size);
    auto iter = prefixedData.begin() + (0x1000 - 0xfee);
    for (auto i = 0U; i < 0x100; ++i, iter += 8)
    {
        iter[0] = iter[2] = iter[4] = iter[6] = static_cast<uint8_t>(i);
    }
    for (auto i = 0U; i < 0x100; ++i, iter += 7)
    {
        iter[0] = iter[2] = iter[4] = iter[6] = static_cast<uint8_t>(i);
        iter[1] = iter[3] = iter[5] = 0xFF;
    }

    Lz01Compressor lz0103(prefixedData.data(), prefixedData.size());
    squeeze::LzCompressor<squeeze::BinaryTreeMatcher<1>> lz{squeeze::BinaryTreeMatcher<1>{4096}};
    lz.matcher().configureMatchClass(0, MatchClass{0, {3, 18}, {1, 4096}});
    lz.compress(prefixedData.data(), prefixedData.size(), lz0103, 4096);
    return lz0103.finish();
}

} // namespace squeeze